"""
Online AI Tools Integration Example

This script demonstrates how to use online AI tools for deepfake generation
and integrate them with the detection system.
"""

import os
import sys
from pathlib import Path

# Add src to path
sys.path.append(str(Path(__file__).parent / "src"))

from generation.online_ai_tools import OnlineAITools
from detection.deepfake_detector import DeepfakeDetector


def setup_api_keys():
    """Setup API keys for online AI tools."""
    print("🔑 Setting up API keys for online AI tools...")
    
    # Check for existing API keys
    api_keys = {
        'REELMIND_API_KEY': os.getenv('REELMIND_API_KEY'),
        'DEEPSYNTH_API_KEY': os.getenv('DEEPSYNTH_API_KEY'),
        'FACESWAP_API_KEY': os.getenv('FACESWAP_API_KEY'),
        'NEURALART_API_KEY': os.getenv('NEURALART_API_KEY'),
        'RUNWAYML_API_KEY': os.getenv('RUNWAYML_API_KEY'),
        'STABILITY_AI_API_KEY': os.getenv('STABILITY_AI_API_KEY')
    }
    
    print("\n📋 API Key Status:")
    for key_name, key_value in api_keys.items():
        status = "✅ Set" if key_value else "❌ Not set"
        print(f"   {key_name}: {status}")
    
    if not any(api_keys.values()):
        print("\n⚠️  No API keys found!")
        print("To use online AI tools, you need to set API keys:")
        print("\n1. Get API keys from the respective services:")
        print("   - Reelmind.ai: https://reelmind.ai/api")
        print("   - DeepSynth Pro: https://deepsynth.com/api")
        print("   - FaceSwap Studio: https://faceswapstudio.com/api")
        print("   - NeuralArt Video: https://neuralart.com/api")
        print("   - RunwayML: https://runwayml.com/api")
        print("   - Stability AI: https://stability.ai/api")
        
        print("\n2. Set environment variables:")
        print("   export REELMIND_API_KEY='your_key_here'")
        print("   export DEEPSYNTH_API_KEY='your_key_here'")
        print("   # ... etc for other services")
        
        print("\n3. Or create a .env file in the project root:")
        print("   REELMIND_API_KEY=your_key_here")
        print("   DEEPSYNTH_API_KEY=your_key_here")
        print("   # ... etc")
        
        return False
    
    return True


def demo_online_tools():
    """Demo: Online AI tools capabilities."""
    print("\n🌐 DEMO: Online AI Tools Integration")
    print("=" * 50)
    
    # Initialize online tools
    online_tools = OnlineAITools()
    
    # Get tool information
    tool_info = online_tools.get_tool_info()
    
    print("🔧 Available Online AI Tools:")
    for tool_id, info in tool_info.items():
        status = "✅ Ready" if info['has_api_key'] else "❌ No API key"
        print(f"\n   {info['name']} ({tool_id})")
        print(f"   Status: {status}")
        print(f"   Description: {info['description']}")
        print(f"   Features: {', '.join(info['features'])}")
    
    return online_tools


def generate_with_online_tool(online_tools, tool_name, source_image, target_video):
    """Generate deepfake using specified online tool."""
    print(f"\n🎬 Generating deepfake with {tool_name}...")
    
    # Create output path
    output_dir = Path("data/generated/online_tools")
    output_dir.mkdir(parents=True, exist_ok=True)
    output_path = output_dir / f"{tool_name}_deepfake.mp4"
    
    # Generate deepfake
    result_path = online_tools.generate_with_online_tool(
        tool_name, source_image, target_video, str(output_path)
    )
    
    if result_path:
        print(f"✅ Deepfake generated: {result_path}")
        return result_path
    else:
        print(f"❌ Failed to generate deepfake with {tool_name}")
        return None


def compare_online_tools(online_tools, source_image, target_video):
    """Compare multiple online tools."""
    print("\n🔍 Comparing Online AI Tools...")
    print("=" * 50)
    
    # Create output directory
    output_dir = Path("data/generated/online_comparison")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Compare tools
    results = online_tools.compare_online_tools(
        source_image, target_video, str(output_dir)
    )
    
    print(f"\n📊 Comparison Results:")
    print(f"   Successful generations: {len(results)}")
    
    for tool_name, output_path in results.items():
        print(f"   ✅ {tool_name}: {output_path}")
    
    return results


def analyze_online_generated_deepfakes(results):
    """Analyze deepfakes generated by online tools."""
    print("\n🔬 Analyzing Online-Generated Deepfakes...")
    print("=" * 50)
    
    # Initialize detector
    detector = DeepfakeDetector(device='auto')
    
    analysis_results = {}
    
    for tool_name, video_path in results.items():
        print(f"\n📊 Analyzing {tool_name} deepfake...")
        
        try:
            # Analyze video
            results_analysis = detector.analyze_video(video_path, sample_rate=30)
            
            # Extract key metrics
            overall_score = results_analysis.get('overall_score', 0.0)
            is_deepfake = results_analysis.get('is_deepfake', False)
            
            analysis_results[tool_name] = {
                'overall_score': overall_score,
                'is_detected': is_deepfake,
                'video_path': video_path
            }
            
            print(f"   Overall Score: {overall_score:.3f}")
            print(f"   Detected as Deepfake: {'YES' if is_deepfake else 'NO'}")
            
        except Exception as e:
            print(f"   ❌ Analysis failed: {e}")
            analysis_results[tool_name] = {
                'overall_score': 0.0,
                'is_detected': False,
                'error': str(e)
            }
    
    return analysis_results


def generate_comparison_report(analysis_results):
    """Generate comparison report for online tools."""
    print("\n📋 Generating Comparison Report...")
    print("=" * 50)
    
    report = []
    report.append("ONLINE AI TOOLS COMPARISON REPORT")
    report.append("=" * 50)
    
    # Sort by detection score (higher = more detectable)
    sorted_results = sorted(analysis_results.items(), 
                          key=lambda x: x[1].get('overall_score', 0), 
                          reverse=True)
    
    report.append(f"\n📊 Detection Results (sorted by detectability):")
    
    for tool_name, results in sorted_results:
        if 'error' in results:
            report.append(f"   {tool_name}: Analysis failed - {results['error']}")
        else:
            score = results['overall_score']
            detected = results['is_detected']
            status = "DETECTED" if detected else "NOT DETECTED"
            report.append(f"   {tool_name}: {score:.3f} ({status})")
    
    # Find best evasion tool
    undetected_tools = [tool for tool, results in analysis_results.items() 
                       if not results.get('is_detected', True) and 'error' not in results]
    
    if undetected_tools:
        report.append(f"\n🏆 Best Evasion Tools (not detected):")
        for tool in undetected_tools:
            report.append(f"   ✅ {tool}")
    else:
        report.append(f"\n⚠️  All tools were detected as deepfakes")
    
    # Find most detectable tool
    if sorted_results:
        most_detectable = sorted_results[0]
        report.append(f"\n🔍 Most Detectable Tool:")
        report.append(f"   {most_detectable[0]}: {most_detectable[1]['overall_score']:.3f}")
    
    report.append(f"\n💡 Key Insights:")
    report.append(f"   - Online AI tools show varying detection resistance")
    report.append(f"   - Some tools may be better at evading detection")
    report.append(f"   - Detection algorithms can identify most synthetic content")
    report.append(f"   - Tool selection affects detection vulnerability")
    
    report.append(f"\n⚠️  Important Notes:")
    report.append(f"   - Results may vary based on source content quality")
    report.append(f"   - Detection algorithms continue to improve")
    report.append(f"   - Ethical use of deepfake technology is essential")
    report.append(f"   - This analysis is for research purposes only")
    
    # Save report
    report_text = "\n".join(report)
    report_path = Path("data/generated/online_comparison_report.txt")
    report_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(report_path, 'w') as f:
        f.write(report_text)
    
    print("✅ Comparison report saved:", report_path)
    print("\n" + report_text)
    
    return report_text


def main():
    """Main function for online AI tools demonstration."""
    print("🌐 Online AI Tools Integration Demo")
    print("=" * 60)
    
    # Setup API keys
    if not setup_api_keys():
        print("\n❌ Cannot proceed without API keys")
        print("Please set up API keys and try again.")
        return
    
    # Demo online tools
    online_tools = demo_online_tools()
    
    # Check for source files
    source_image = "data/source_videos/source_face.jpg"
    target_video = "data/source_videos/target_video.mp4"
    
    if not os.path.exists(source_image):
        print(f"\n❌ Source image not found: {source_image}")
        print("Please add a source face image to test online tools")
        return
    
    if not os.path.exists(target_video):
        print(f"\n❌ Target video not found: {target_video}")
        print("Please add a target video to test online tools")
        return
    
    # Menu for user interaction
    while True:
        print("\n" + "=" * 60)
        print("🌐 Online AI Tools Menu")
        print("=" * 60)
        print("1. Generate with specific tool")
        print("2. Compare all available tools")
        print("3. Analyze generated deepfakes")
        print("4. Generate comparison report")
        print("5. Exit")
        
        choice = input("\nEnter your choice (1-5): ").strip()
        
        if choice == "1":
            # Generate with specific tool
            tool_info = online_tools.get_tool_info()
            available_tools = [tool for tool, info in tool_info.items() if info['has_api_key']]
            
            if not available_tools:
                print("❌ No tools available (no API keys set)")
                continue
            
            print("\nAvailable tools:")
            for i, tool in enumerate(available_tools, 1):
                print(f"   {i}. {tool}")
            
            try:
                tool_choice = int(input("Select tool (number): ")) - 1
                if 0 <= tool_choice < len(available_tools):
                    tool_name = available_tools[tool_choice]
                    generate_with_online_tool(online_tools, tool_name, source_image, target_video)
                else:
                    print("❌ Invalid selection")
            except ValueError:
                print("❌ Invalid input")
        
        elif choice == "2":
            # Compare all tools
            results = compare_online_tools(online_tools, source_image, target_video)
            if results:
                print(f"\n✅ Generated {len(results)} deepfakes for comparison")
        
        elif choice == "3":
            # Analyze generated deepfakes
            output_dir = Path("data/generated/online_comparison")
            if not output_dir.exists():
                print("❌ No generated deepfakes found. Run comparison first.")
                continue
            
            # Find generated videos
            video_files = list(output_dir.glob("*.mp4"))
            if not video_files:
                print("❌ No video files found in comparison directory")
                continue
            
            # Create results dictionary
            results = {}
            for video_file in video_files:
                tool_name = video_file.stem.replace("_output", "")
                results[tool_name] = str(video_file)
            
            analysis_results = analyze_online_generated_deepfakes(results)
            print("✅ Analysis completed")
        
        elif choice == "4":
            # Generate comparison report
            output_dir = Path("data/generated/online_comparison")
            if not output_dir.exists():
                print("❌ No generated deepfakes found. Run comparison first.")
                continue
            
            # Find generated videos
            video_files = list(output_dir.glob("*.mp4"))
            if not video_files:
                print("❌ No video files found in comparison directory")
                continue
            
            # Create results dictionary
            results = {}
            for video_file in video_files:
                tool_name = video_file.stem.replace("_output", "")
                results[tool_name] = str(video_file)
            
            # Analyze and generate report
            analysis_results = analyze_online_generated_deepfakes(results)
            generate_comparison_report(analysis_results)
        
        elif choice == "5":
            print("👋 Goodbye!")
            break
        
        else:
            print("❌ Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
